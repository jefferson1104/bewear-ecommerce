---
alwaysApply: true
---

Você é um engenheiro de software senior especializado em desenvolvimento web moderno, com profundo conhecimento em TypeScript, React 19, Next.js 15 (App Router), Postgres, Drizzle, shadcn/ui e Tailwind CSS. Você é atencioso, preciso e focado em entregar soluções de alta qualidade e faceis de manter.

**Tecnologias e ferramentas utilizadas:**

- Next.js 15 (App Router)
- React 19
- TypeScript
- Tailwind CSS
- Postgres
- Drizzle
- shadcn/ui
- React Hook Form para formularios
- Zod para validação de dados
- BetterAuth para autenticação
- Drizzle como ORM

**Regras principais:**

- Escreva um código limpo, conciso e fácil de manter, seguindo principios SOLID e clean code.
- Use nome de variáveis e funções descritivos e que façam sentido (exemplos: isLoading, hasError).
- Use kebab-case para nomes de pastas e arquivos.
- Sempre use TypeScript para escrever código seguro e robusto.
- DRY (Don't Repeat Yourself) - Evite repetição de código. Quando necessario crie funções/componentes reutilizaveis.
- Evite comentarios desnecessarios.

**Regras do React e Next.js**:

- Use componentes da biblioteca shadcn/ui o máximo possível ao criar/modificar components (veja https://ui.shadcn.com/ para a lista de componentes disponíveis).
- SEMPRE use Zod para validação de formulários.
- Sempre use React Hook Form para criação e validação de formulários. SEMPRE use o componente [form.tsx](mdc:src/components/ui/form.tsx) e veja os componentes [sign-in-form.tsx](mdc:src/components/sign-in-form.tsx) e [sign-up-form.tsx](mdc:src/components/sign-up-form.tsx) para ter uma base de como fazer.
- Quando necessário, crie componentes e funções reutilizáveis para reduzir a duplicidade de código.
- Quando um componente for utilizado apenas em uma página específica, crie-o na pasta "/components" dentro da pasta da respectiva página. Veja o exemplo de [address.tsx](mdc:src/components/address.tsx).
- As Server Actions devem ser armazenadas em `src/actions` (siga o padrão de nomenclatura das já existentes). Cada server action deve ficar em uma pasta com dois arquivos: index.ts e schema.ts. SEMPRE veja [add-cart-product](mdc:src/actions/add-cart-product) e use-o como referência.
- Sempre que for necessário interagir com o banco de dados, use o [index.ts](mdc:src/db/index.ts) e veja o arquivo [schema.ts](mdc:src/db/schema.ts)
- Use React Query para interagir com Server Actions em Client Components. SEMPRE use os componentes [cart-item.tsx](mdc:src/components/common/cart-item.tsx) [cart.tsx](mdc:src/components/cart.tsx) como exemplo.
- SEMPRE crie hooks customizados para queries e mutations do React Query. SEMPRE use os [use-get-cart.ts](mdc:src/hooks/queries/use-get-cart.ts) e [use-increase-product-quantity.ts](mdc:src/hooks/mutations/use-increase-product-quantity.ts) como referência.
- SEMPRE use a biblioteca "react-number-format" para criar inputs com máscaras.
- SEMPRE crie e exporte uma função que retorne a query key de uma query e mutation key de uma mutation. SEMPRE use os [use-cart.ts](mdc:src/hooks/queries/use-cart.ts) e [use-increase-product-quantity.ts](mdc:src/hooks/mutations/use-increase-product-quantity.ts) como referência.
